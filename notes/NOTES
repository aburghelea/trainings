Uncle Bob [0]
	Single Responsibility Principal
	Open/closed principle
	Liskov substitution principle
	Interface segregation principle
	Dependency inversion principal
[0] http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)

Late binding [1][2]
[1] http://onlyjava.wordpress.com/2007/11/23/late-binding-vs-static-binding/
[2] http://en.wikipedia.org/wiki/Late_binding


Subiecte Spring

1) DI/ IOC
2) BeanFactory & ApplicationContext
3) Bean Scoping
4) Lifecycle of a "bean" in the container
5) Lifecycle hooks
6) BeanPostProcessors & BeanFactoryPostProcessors
7) FactoryBean-s
8) Resource API (Filesystem, Classpath, etc)
9) Spring AOP Framework(sa vedem daca avem timp si de integrarea cu AspectJ)
10) Transaction Management with Spring
11) Spring Web / Web MVC


DIC -> getBean("...") asamblata cu toate dependintele

//TODO: interfete package protected ???

getBean(Class) -> aduce beanul care e definit UNIC de tipul asta , arunca NoSuchBeanException


Scoping | Ierarhii de Containere IoC/Spring

Ierarhizare de BeanFactory

scope (default singleton)
        singleton => o singura instanta per bean-definition / per BeanFactory / per ClassLoaderul folosit
        prototype => per getBean se furnizeaza o instanta noua
        request => per request web se creaza;
        session => per intreaga sesiune cu dezvoltator
        globabalSession => portleti
        CUSTOM => definit
		
abstract 
		marcheaza ca un bean ca fiind template de configurare
	
lazy-init 
beanFactory-urile NU preinitializeaza bean-urile singleton => se poate folosi 
ConfigurableListFactory factory ...
factory.preInstantiateSingletons();


Ierarhie de XML-uri de configurare
in doua XML-uri pot exista cu acelasi nume de bean, cel de al doilea suprascriindul pe primul